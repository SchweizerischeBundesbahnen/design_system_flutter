
plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.github.triplet.play"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}
// for local signing
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace 'ch.sbb.fdsm.example'
    compileSdkVersion 36

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    defaultConfig {
        applicationId "ch.sbb.fdsm.example"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            // these will be given in Github Workflow
            storeFile file(System.getenv('PUBLISH_KEYSTORE_FILE') ?: file("keys/fdsm_keystore.jks"))
            storePassword System.getenv('KEYSTORE_PASSWORD') ?: keystoreProperties['storePassword']
            keyAlias System.getenv('SIGNING_KEY_ALIAS') ?: keystoreProperties['keyAlias']
            keyPassword System.getenv('KEY_PASSWORD') ?: keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        debug
        profile
        release {
            signingConfig signingConfigs.release
        }
    }
}

play {
    track.set('alpha')
    serviceAccountCredentials.set(file("keys/gp_service_account.json"))
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}
